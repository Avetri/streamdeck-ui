{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Read Latest Documentation Release notes streamdeck_ui A Linux compatible UI for the Elgato Stream Deck. Key Features Linux Compatible : Enables usage of Stream Deck devices (Original, MK2, Mini and XL) on Linux. Multi-device : Enables connecting and configuring multiple Stream Decks on one computer. Brightness Control : Supports controlling the brightness from both the configuration UI and buttons on the device itself. Configurable Button Display : Icons + Text, Icon Only, and Text Only configurable per button on the Stream Deck. Multi-Action Support : Run commands, write text and press hotkey combinations at the press of a single button on your Stream Deck. Button Pages : streamdeck_ui supports multiple pages of buttons and dynamically setting up buttons to switch between those pages. Auto Reconnect : Automatically and gracefully reconnects, in the case the device is unplugged and replugged in. Import/Export : Supports saving and restoring Stream Deck configuration. Drag/Drop : Move buttons by simply drag and drop. Drag/Drop Image : Configure a button image by dragging it from your file manager onto the button. Auto Dim : Configure the Stream Deck to automatically dim the display after a period of time. A button press wakes it up again. Animated icons : Use an animated gif to liven things up a bit. Runs under systemd : Run automatically in the background as a systemd --user service. Stream Deck Pedal : Supports actions when pressing pedals. Communication with the Stream Deck is powered by the Python Elgato Stream Deck Library . Installation Guides Arch/Manjaro CentOS Fedora openSUSE Ubuntu/Mint Once you're up and running, consider installing a systemd service . Use the troubleshooting guide or search the issues for guidance. Precooked Scripts There are scripts for setting up streamdeck_ui on Debian/Ubuntu and Fedora . Help Start without showing the user interface Note you can start streamdeck_ui without showing the configuration user interface as follows: streamdeck -n Command Enter a value in the command field to execute a command. For example, gnome-terminal will launch a new terminal on Ubuntu/Fedora or obs will launch OBS. Examples These examples are for Ubuntu using xorg. You can use a tool like xdotool to interact with other applications. Find the window with a title starting with Meet - and bring it to focus. This helps if you have a Google Meet session on a tab somewhere but you lost it behind another window. xdotool search --name '^Meet - .+$' windowactivate The meeting tab must be active one if you have multiple tabs open, since the window title is set by the currently active tab. Find the window with a title starting with Meet - and then send ctrl+d to it. This has the effect of toggling the mute button in Google Meet. xdotool search --name '^Meet - .+$' windowactivate --sync key ctrl+d Change the system volume up (or down) by a certain percentage. Assumes you're using PulseAudio/Alsa Mixer. amixer -D pulse sset Master 20%+ If you want you invoke a command that uses shell-script specific things like && or | , run it via bash. This command will shift focus to firefox using the wmctrl , and then shifts focus to the first tab: bash -c \"wmctrl -a firefox && xdotool key alt+1\" Press Keys Simulates key press combinations (hot keys). The basic format is a group of keys, separated by a + sign to press simultaneously. Separate key combination groups with a , if additional key combinations are needed. For example, alt+F4,f means press and hold alt , followed by F4 and then release both. Next, press and release f . You can also specify a KeyCode in hex format, for example, 0x74 is the KeyCode for t . This is also sometimes called the keysym value. You can use the xev tool and capture the key you are looking for. In the output, look for the keysym hex value , for example (keysym 0x74, t) Use comma or plus if you want to actually output , or + respectively. Use delay <n> to add a delay, where <n> is the number (float or integer) of seconds to delay. If <n> is not specified, 0.5 second default is used. If <n> fails to parse as a valid number, it will result in no delay. Examples F11 - Press F11. If you have focus on a browser, this will toggle full screen. alt+F4 - Closes the current window. ctrl+w - Closes the current browser tab. cmd+left - View split on left. Note cmd is the super key (equivalent of the Windows key). alt+plus - Presses the alt and the + key at the same time. alt+delay+F4 - Press alt, then wait 0.5 seconds, then press F4. Release both. 1,delay,delay,2,delay,delay,3 - Type 123 with a 1-second delay between key presses (using default delay). 1,delay 1,2,delay 1,3 - Type 123 with a 1-second delay between key presses (using custom delay). e,c,h,o,space,\",t,e,s,t,\",enter - Type echo \"test\" and press enter. ctrl+alt+0x74 - Opens a new terminal window. 0x74 is the KeyCode for t . TIP: If the character doesn't work, try using the KeyCode instead. 0xffe5 - Toggle Caps Lock. 0xffaf - The / key on the numeric key pad. The standard list of keys can be found at the source . The super key (Windows key) can be problematic on some versions of Linux. Instead of using the Key Press feature, you could use the Command feature as follows. In this example, it will press Super and 4 , which launches application number 4 in your favorites (Ubuntu). xdotool key \"Super_L+4\" Write Text A quick way of typing longer pieces of text (verbatim). Note that unlike the Press Keys action, write text does not accept special (modifier) keys. However, if you type Enter (causing a new line) it will press enter during the output. Examples Unfortunately that ' s a hard no . Kind regards , Joe Known issues Confirm you are running the latest release with pip show streamdeck-ui . Compare it to: Streamdeck uses pynput for simulating Key Presses but it lacks proper support for Wayland . Generally your results will be good when using X (Ubuntu/Linux Mint). This thread may be useful. Key Press or Write Text does not work on Fedora (outside of the streamdeck itself), which is not particularly useful. However, still do a lot with the Command feature. Some users have reported that the Stream Deck device does not work on all on specific USB ports, as it draws quite a bit of power and/or has strict bandwidth requirements . Try a different port. If you are executing a shell script from the Command feature - remember to add the shebang at the top of your file, for the language in question. #!/bin/bash or #!/usr/bin/python3 etc. The streamdeck may appear to lock up if you don't under some distros.","title":"Home"},{"location":"#key-features","text":"Linux Compatible : Enables usage of Stream Deck devices (Original, MK2, Mini and XL) on Linux. Multi-device : Enables connecting and configuring multiple Stream Decks on one computer. Brightness Control : Supports controlling the brightness from both the configuration UI and buttons on the device itself. Configurable Button Display : Icons + Text, Icon Only, and Text Only configurable per button on the Stream Deck. Multi-Action Support : Run commands, write text and press hotkey combinations at the press of a single button on your Stream Deck. Button Pages : streamdeck_ui supports multiple pages of buttons and dynamically setting up buttons to switch between those pages. Auto Reconnect : Automatically and gracefully reconnects, in the case the device is unplugged and replugged in. Import/Export : Supports saving and restoring Stream Deck configuration. Drag/Drop : Move buttons by simply drag and drop. Drag/Drop Image : Configure a button image by dragging it from your file manager onto the button. Auto Dim : Configure the Stream Deck to automatically dim the display after a period of time. A button press wakes it up again. Animated icons : Use an animated gif to liven things up a bit. Runs under systemd : Run automatically in the background as a systemd --user service. Stream Deck Pedal : Supports actions when pressing pedals. Communication with the Stream Deck is powered by the Python Elgato Stream Deck Library .","title":"Key Features"},{"location":"#installation-guides","text":"Arch/Manjaro CentOS Fedora openSUSE Ubuntu/Mint Once you're up and running, consider installing a systemd service . Use the troubleshooting guide or search the issues for guidance.","title":"Installation Guides"},{"location":"#precooked-scripts","text":"There are scripts for setting up streamdeck_ui on Debian/Ubuntu and Fedora .","title":"Precooked Scripts"},{"location":"#help","text":"","title":"Help"},{"location":"#start-without-showing-the-user-interface","text":"Note you can start streamdeck_ui without showing the configuration user interface as follows: streamdeck -n","title":"Start without showing the user interface"},{"location":"#command","text":"Enter a value in the command field to execute a command. For example, gnome-terminal will launch a new terminal on Ubuntu/Fedora or obs will launch OBS.","title":"Command"},{"location":"#examples","text":"These examples are for Ubuntu using xorg. You can use a tool like xdotool to interact with other applications. Find the window with a title starting with Meet - and bring it to focus. This helps if you have a Google Meet session on a tab somewhere but you lost it behind another window. xdotool search --name '^Meet - .+$' windowactivate The meeting tab must be active one if you have multiple tabs open, since the window title is set by the currently active tab. Find the window with a title starting with Meet - and then send ctrl+d to it. This has the effect of toggling the mute button in Google Meet. xdotool search --name '^Meet - .+$' windowactivate --sync key ctrl+d Change the system volume up (or down) by a certain percentage. Assumes you're using PulseAudio/Alsa Mixer. amixer -D pulse sset Master 20%+ If you want you invoke a command that uses shell-script specific things like && or | , run it via bash. This command will shift focus to firefox using the wmctrl , and then shifts focus to the first tab: bash -c \"wmctrl -a firefox && xdotool key alt+1\"","title":"Examples"},{"location":"#press-keys","text":"Simulates key press combinations (hot keys). The basic format is a group of keys, separated by a + sign to press simultaneously. Separate key combination groups with a , if additional key combinations are needed. For example, alt+F4,f means press and hold alt , followed by F4 and then release both. Next, press and release f . You can also specify a KeyCode in hex format, for example, 0x74 is the KeyCode for t . This is also sometimes called the keysym value. You can use the xev tool and capture the key you are looking for. In the output, look for the keysym hex value , for example (keysym 0x74, t) Use comma or plus if you want to actually output , or + respectively. Use delay <n> to add a delay, where <n> is the number (float or integer) of seconds to delay. If <n> is not specified, 0.5 second default is used. If <n> fails to parse as a valid number, it will result in no delay.","title":"Press Keys"},{"location":"#examples_1","text":"F11 - Press F11. If you have focus on a browser, this will toggle full screen. alt+F4 - Closes the current window. ctrl+w - Closes the current browser tab. cmd+left - View split on left. Note cmd is the super key (equivalent of the Windows key). alt+plus - Presses the alt and the + key at the same time. alt+delay+F4 - Press alt, then wait 0.5 seconds, then press F4. Release both. 1,delay,delay,2,delay,delay,3 - Type 123 with a 1-second delay between key presses (using default delay). 1,delay 1,2,delay 1,3 - Type 123 with a 1-second delay between key presses (using custom delay). e,c,h,o,space,\",t,e,s,t,\",enter - Type echo \"test\" and press enter. ctrl+alt+0x74 - Opens a new terminal window. 0x74 is the KeyCode for t . TIP: If the character doesn't work, try using the KeyCode instead. 0xffe5 - Toggle Caps Lock. 0xffaf - The / key on the numeric key pad. The standard list of keys can be found at the source . The super key (Windows key) can be problematic on some versions of Linux. Instead of using the Key Press feature, you could use the Command feature as follows. In this example, it will press Super and 4 , which launches application number 4 in your favorites (Ubuntu). xdotool key \"Super_L+4\"","title":"Examples"},{"location":"#write-text","text":"A quick way of typing longer pieces of text (verbatim). Note that unlike the Press Keys action, write text does not accept special (modifier) keys. However, if you type Enter (causing a new line) it will press enter during the output.","title":"Write Text"},{"location":"#examples_2","text":"Unfortunately that ' s a hard no . Kind regards , Joe","title":"Examples"},{"location":"#known-issues","text":"Confirm you are running the latest release with pip show streamdeck-ui . Compare it to: Streamdeck uses pynput for simulating Key Presses but it lacks proper support for Wayland . Generally your results will be good when using X (Ubuntu/Linux Mint). This thread may be useful. Key Press or Write Text does not work on Fedora (outside of the streamdeck itself), which is not particularly useful. However, still do a lot with the Command feature. Some users have reported that the Stream Deck device does not work on all on specific USB ports, as it draws quite a bit of power and/or has strict bandwidth requirements . Try a different port. If you are executing a shell script from the Command feature - remember to add the shebang at the top of your file, for the language in question. #!/bin/bash or #!/usr/bin/python3 etc. The streamdeck may appear to lock up if you don't under some distros.","title":"Known issues"},{"location":"CHANGELOG/","text":"Upgrade To upgrade to the latest version, run: python -m pip install streamdeck-ui --user --upgrade Note you may have to use python3 , python3.8 etc. depending on your operating system and Python version. Change log 2.0.16 - TBD Features Added ~ path expansion for icons. Fixes Fix error when pressing Streamdeck Pedal. 2.0.15 - 8 March 2023 Features Added support for Stream Deck Pedal. 2.0.14 - 4 Mar 2023 Features Ensure only one instance can run (prevents settings file corruption). Press Ctrl+c in terminal to quit. Supports systemd install and added documentation. 2.0.13 - 27 Feb 2023 Fixes Requirement for Python < 3.11 removed. Switched to pyside6. Features Added support for a new sub-variant of the StreamDeck XL. Allow Stream Deck UI to start, even if virtual keyboard won't work. Improved troubleshooting messages. Updated documentation and installation guides. 2.0.6 - 23 Sep 2022 Fixes Image drag/drop from external applications. Dimmer not working properly. 2.0.5 - 18 Sep 2022 Features Support for new Stream Deck Mini. Fixes Fix install under Fedora 36 (pillow dependency version bump). 2.0.4 - 29 Apr 2022 Features Recover from a suspend/resume cycle. Fixes Button icon stuck in pushed state when changing from page 1. Remove python3-xlib dependency. 2.0.3 - 6 Mar 2022 Features UI starts up even if no Stream Deck attached. SVG file type support. Keys widget now has examples built in. Help menu with links to websites. About dialog shows application version and primary dependency versions. Support hex key codes in Key Press. For example, 0x74. Support vertical text alignment. New display system: User interface shows same image as Stream Deck. Text overlay on top of image, with automatic font outline. Buttons image change when pressed (visual feedback). Animated GIF support. CPU indicator for display processing. Fixes Tray context menu not interrupted by window activation. 1.1.3 - 2 Feb 2022 Features Support for Stream Deck MK.2 added. Remember previous image selection directory. Auto dim to a configurable percentage. Drag and drop icons onto buttons from file browser. Follow the settings file location if symbolic link. Fixes Works with Python 3.10 (resolves Fedora 35 install). 1.1.2 - April 30, 2021 Fixes Regression with multi-character keys. 1.1.1 - April 29, 2021 Features Open main window from tray with Configure... menu item. Dim the display from tray. Supports variable delay duration in Key press action. Fixes On exit, reset the display to 50% brightness. Documentation for Ubuntu 18.04 added. 1.1.0 - April 20, 2021 Features Automatically dim the display after a configurable amount of time. 1.0.7 - April 6, 2021 Features Drag and drop support for rearranging buttons around in UI. Launches minimized with -n or --no-ui . Window title has been updated to Stream Deck UI . A remove image button has been added. Cancelling during image selection no longer removes image. Image selection button defaults to previous image path, if there is one. Reset to the standby image after exiting. This makes it easy to see if streamdeck-ui is running or not. Supports delay in Key Press action to add a 0.5 second delay. Supports plus and comma in the Key Press action to output + and , respectively. Separator added between Exit and other menu items. Avoid unnecessary writes to settings file. Improved parsing of command line arguments for launching programs. Fixes Missing button image error handling added. Avoid losing configuration if there is an exception while writing file. Updated to streamdeck 0.8.4 to improve stability. Updated to Pillow 8.2 to improve stability and fixes jpeg artifacts. Fixed race condition where streamdeck buttons get scrambled. Fixed core dumped error when exiting. Improved error handling for invalid command or key press actions. Fixed black on black color issue on UI buttons. Removed requirement for plugdev group. Waits for Stream Deck to be attached on start up. 1.0.2 - November 25, 2019 Updated driver requirement to enable full compatibility with XL. 1.0.1 - October 8, 2019 Initial API stable release.","title":"Changelog"},{"location":"CHANGELOG/#upgrade","text":"To upgrade to the latest version, run: python -m pip install streamdeck-ui --user --upgrade Note you may have to use python3 , python3.8 etc. depending on your operating system and Python version.","title":"Upgrade"},{"location":"CHANGELOG/#change-log","text":"","title":"Change log"},{"location":"CHANGELOG/#2016-tbd","text":"","title":"2.0.16 - TBD"},{"location":"CHANGELOG/#features","text":"Added ~ path expansion for icons.","title":"Features"},{"location":"CHANGELOG/#fixes","text":"Fix error when pressing Streamdeck Pedal.","title":"Fixes"},{"location":"CHANGELOG/#2015-8-march-2023","text":"","title":"2.0.15 - 8 March 2023"},{"location":"CHANGELOG/#features_1","text":"Added support for Stream Deck Pedal.","title":"Features"},{"location":"CHANGELOG/#2014-4-mar-2023","text":"","title":"2.0.14 - 4 Mar 2023"},{"location":"CHANGELOG/#features_2","text":"Ensure only one instance can run (prevents settings file corruption). Press Ctrl+c in terminal to quit. Supports systemd install and added documentation.","title":"Features"},{"location":"CHANGELOG/#2013-27-feb-2023","text":"","title":"2.0.13 - 27 Feb 2023"},{"location":"CHANGELOG/#fixes_1","text":"Requirement for Python < 3.11 removed. Switched to pyside6.","title":"Fixes"},{"location":"CHANGELOG/#features_3","text":"Added support for a new sub-variant of the StreamDeck XL. Allow Stream Deck UI to start, even if virtual keyboard won't work. Improved troubleshooting messages. Updated documentation and installation guides.","title":"Features"},{"location":"CHANGELOG/#206-23-sep-2022","text":"","title":"2.0.6 - 23 Sep 2022"},{"location":"CHANGELOG/#fixes_2","text":"Image drag/drop from external applications. Dimmer not working properly.","title":"Fixes"},{"location":"CHANGELOG/#205-18-sep-2022","text":"","title":"2.0.5 - 18 Sep 2022"},{"location":"CHANGELOG/#features_4","text":"Support for new Stream Deck Mini.","title":"Features"},{"location":"CHANGELOG/#fixes_3","text":"Fix install under Fedora 36 (pillow dependency version bump).","title":"Fixes"},{"location":"CHANGELOG/#204-29-apr-2022","text":"","title":"2.0.4 - 29 Apr 2022"},{"location":"CHANGELOG/#features_5","text":"Recover from a suspend/resume cycle.","title":"Features"},{"location":"CHANGELOG/#fixes_4","text":"Button icon stuck in pushed state when changing from page 1. Remove python3-xlib dependency.","title":"Fixes"},{"location":"CHANGELOG/#203-6-mar-2022","text":"","title":"2.0.3 - 6 Mar 2022"},{"location":"CHANGELOG/#features_6","text":"UI starts up even if no Stream Deck attached. SVG file type support. Keys widget now has examples built in. Help menu with links to websites. About dialog shows application version and primary dependency versions. Support hex key codes in Key Press. For example, 0x74. Support vertical text alignment. New display system: User interface shows same image as Stream Deck. Text overlay on top of image, with automatic font outline. Buttons image change when pressed (visual feedback). Animated GIF support. CPU indicator for display processing.","title":"Features"},{"location":"CHANGELOG/#fixes_5","text":"Tray context menu not interrupted by window activation.","title":"Fixes"},{"location":"CHANGELOG/#113-2-feb-2022","text":"","title":"1.1.3 - 2 Feb 2022"},{"location":"CHANGELOG/#features_7","text":"Support for Stream Deck MK.2 added. Remember previous image selection directory. Auto dim to a configurable percentage. Drag and drop icons onto buttons from file browser. Follow the settings file location if symbolic link.","title":"Features"},{"location":"CHANGELOG/#fixes_6","text":"Works with Python 3.10 (resolves Fedora 35 install).","title":"Fixes"},{"location":"CHANGELOG/#112-april-30-2021","text":"","title":"1.1.2 - April 30, 2021"},{"location":"CHANGELOG/#fixes_7","text":"Regression with multi-character keys.","title":"Fixes"},{"location":"CHANGELOG/#111-april-29-2021","text":"","title":"1.1.1 - April 29, 2021"},{"location":"CHANGELOG/#features_8","text":"Open main window from tray with Configure... menu item. Dim the display from tray. Supports variable delay duration in Key press action.","title":"Features"},{"location":"CHANGELOG/#fixes_8","text":"On exit, reset the display to 50% brightness. Documentation for Ubuntu 18.04 added.","title":"Fixes"},{"location":"CHANGELOG/#110-april-20-2021","text":"","title":"1.1.0 - April 20, 2021"},{"location":"CHANGELOG/#features_9","text":"Automatically dim the display after a configurable amount of time.","title":"Features"},{"location":"CHANGELOG/#107-april-6-2021","text":"","title":"1.0.7 - April 6, 2021"},{"location":"CHANGELOG/#features_10","text":"Drag and drop support for rearranging buttons around in UI. Launches minimized with -n or --no-ui . Window title has been updated to Stream Deck UI . A remove image button has been added. Cancelling during image selection no longer removes image. Image selection button defaults to previous image path, if there is one. Reset to the standby image after exiting. This makes it easy to see if streamdeck-ui is running or not. Supports delay in Key Press action to add a 0.5 second delay. Supports plus and comma in the Key Press action to output + and , respectively. Separator added between Exit and other menu items. Avoid unnecessary writes to settings file. Improved parsing of command line arguments for launching programs.","title":"Features"},{"location":"CHANGELOG/#fixes_9","text":"Missing button image error handling added. Avoid losing configuration if there is an exception while writing file. Updated to streamdeck 0.8.4 to improve stability. Updated to Pillow 8.2 to improve stability and fixes jpeg artifacts. Fixed race condition where streamdeck buttons get scrambled. Fixed core dumped error when exiting. Improved error handling for invalid command or key press actions. Fixed black on black color issue on UI buttons. Removed requirement for plugdev group. Waits for Stream Deck to be attached on start up.","title":"Fixes"},{"location":"CHANGELOG/#102-november-25-2019","text":"Updated driver requirement to enable full compatibility with XL.","title":"1.0.2 - November 25, 2019"},{"location":"CHANGELOG/#101-october-8-2019","text":"Initial API stable release.","title":"1.0.1 - October 8, 2019"},{"location":"README-de/","text":"Lese die neueste Dokumentation Release notes WARNUNG: Diese Dokumentation ist veraltet und m\u00f6glicherweise nicht korrekt. streamdeck_ui Ein Linux kompatibles UserInterface f\u00fcr das Elgato Stream Deck. Eigenschaften Linux Kompatibel : Erm\u00f6glicht die Nutzung aller Stream Deck Ger\u00e4te mit Linux ohne code zu ben\u00f6tigen. Mehrere Ger\u00e4te : Erm\u00f6glicht die Verbindung und Konfiguration mehrere Stream Deck Ger\u00e4te an einem Computer. Helligkeits-Steuerung : Unterst\u00fctzt die Einstellung der Helligkeit von der Konfigurations-Oberfl\u00e4che und den Kn\u00f6pfen am Ger\u00e4t selbst. Konfigurierbares Tastenbild : Icon + Text, nur Icon und nur Text sind pro Taste des Stream Decks konfigurierbar. Multi-Action Unterst\u00fctzung : Kommandos starten, Text schreiben und Hotkey-Kombinationen dr\u00fccken mit einem einzigen Tastendruck auf dem Stream Deck. Tasten-Seiten : streamdeck_ui bietet mehrere Seiten von Tasten mit dynamischer Einstellung von Tasten zum Umschalten zwischen ihnen. Automatisches Wiederverbinden : Das Ger\u00e4t wird automatisch und problemlos wieder verbunden, falls das Ger\u00e4t ab- und wieder angesteckt wurde. Import/Export : Bietet das Abspeichern und Wiederherstellen ganzer Stream Deck Konfigurationen. Die Kommunikation mit dem Streamdeck erfolgt durch die Python Elgato Stream Deck Library . Linux Schnellstart Python 3.8 wird ben\u00f6tigt. Sie k\u00f6nnen die Version, die sie installiert haben, \u00fcberpr\u00fcfen mit python3 --version . Vorgefertigte Skripte Es gibt fertige Skripte um streamdeck_ui auf Debian/Ubuntu und Fedora zu installieren. Manuelle Installation Um streamdeck_ui unter Linux zu verwenden, m\u00fcssen einige System-Bibliotheken als Voraussetzung installiert werden. Die Namen dieser Bibliotheken k\u00f6nnen, abh\u00e4ngig von ihrem Betriebssystem, variieren. Debian / Ubuntu: sudo apt install python3-pip libhidapi-libusb0 libxcb-xinerama0 Fedora: sudo dnf install python3-pip python3-devel hidapi Wenn sie die GNOME shell verwenden, k\u00f6nnten sie eine Erweiterung, die den KStatusNotifierItem/AppIndicator Support bietet, manuell installieren m\u00fcssen um das Tray-Icon anzuzeigen. Um streamdeck_ui ohne root-Rechte zu benutzen, m\u00fcssen sie ihrem user vollen Zugriff auf das Ger\u00e4t erlauben. F\u00fcgen sie die folgenden udev rules mit Hilfe ihres Editors hinzu: sudoedit /etc/udev/rules.d/70-streamdeck.rules # Wenn das nicht funktioniert, versuchen sie: sudo nano /etc/udev/rules.d/70-streamdeck.rules F\u00fcgen sie die folgenden Zeilen ein: SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", TAG+=\"uaccess\" Aktivieren sie die Regeln: sudo udevadm trigger Die Installation der Anwendung selbst erfolgt via pip: pip3 install streamdeck-ui --user Stellen sie sicher, dass $HOME/.local/bin in ihrem PATH enthalten ist. Wenn das nicht der Fall ist, f\u00fcgen sie PATH=$PATH:$HOME/.local/bin an das Ende ihrer shell Konfigurationsdatei (wahrscheinlich .bashrc in ihrem home directory) hinzu. Jetzt k\u00f6nnen sie streamdeck starten um mit der Konfiguration zu beginnen. streamdeck Es wird empfohlen streamdeck in die Autostart-Liste ihrer Fenster-Umgebung aufzunehmen. Wenn sie es verwenden wollen ohne dass das Benutzer-Interface angezeigt wird, verwenden sie streamdeck -n . Allgemeiner Schnellstart Auf anderen Betriebssystemen m\u00fcssen sie die ben\u00f6tigten Abh\u00e4ngigkeiten der Bibliothek installieren. Danach verwenden sie pip zur Installation der Anwendung: pip3 install streamdeck-ui --user streamdeck Beachten sie auch die Anleitungen f\u00fcr Arch/Manjaro CentOS Fedora openSUSE Ubuntu/Mint Hilfe Befehl (Command) Geben sie einen Befehl in das Feld \"Command\" ein, um ihn auszuf\u00fchren. In Ubuntu/Fedora starten sie ein Terminal mit gnome-terminal , obs startet OBS. Beispiele (Ubuntu) Sie k\u00f6nnen ein tool wie xdotool verwenden, um mit anderen Programmen zu interagieren. Finden sie das Fenster, das mit Meet - beginnt, und setzen sie den Fokus darauf. Das hilft ihnen, wenn sie eine Google Meet Sitzung auf irgend einem Tab haben, die aber hinter anderen Fenstern verloren gegangen ist. xdotool search --name '^Meet - .+$' windowactivate Der Meeting-Tab muss aktiv sein wenn sie mehrere Tabs offen haben, da der Fenstertitel vom derzeit aktiven Tab gesetzt wird. Finden sie das Fenster, das mit Meet - beginnt, und senden sie ctrl+d dorthin. Das bewirkt das Umschalten der Stummschaltung (mute button) in Google Meet. xdotool search --name '^Meet - .+$' windowactivate --sync key ctrl+d Drehen sie die System-Lautst\u00e4rke um einen gewissen Prozentsatz hoch (oder runter). Wir nehmen an, sie verwenden PulseAudio/Alsa Mixer. amixer -D pulse sset Master 20%+ Wenn sie einen Befehl abgeben wollen der shell-script spezifische Dinge wie && oder | enth\u00e4lt, dann starten sie ihn via bash. Dieser Befehl wird de Fokus auf Firefox setzen, indem es wmctrl nutzt, und dann den Fokus auf den ersten Tab verschieben: bash -c \"wmctrl -a firefox && xdotool key alt+1\" Tasten dr\u00fccken Simuliert Tasten-Kombinationen (hot keys). Grunds\u00e4tzlich werden Tasten, die gleichzeitig bet\u00e4tigt werden, mit einem + Zeichen verbunden. Trennen sie Tasten-Kombinationen mit einem , , wenn zus\u00e4tzliche Kombinationen ben\u00f6tigt werden. Die Zeichenfolge alt+F4,f zum Beispiel bedeutet dr\u00fccke und halte alt , gefolgt von F4 und lass dann beide los. Dr\u00fccke anschlie\u00dfend f und lass es wieder los. Sie k\u00f6nnen auch einen Tasten-Code im hex Format verwenden, 0x74 ist zum Beispiel der Tasten-Code f\u00fcr t . Dieser Wert wird auch manchmal als keysym bezeichnet. Sie k\u00f6nnen das tool xev verwenden um den Key-Code einer Taste zu ermitteln. Suchen sie in der Ausgabe nach keysym hex value , zum Beispiel (keysym 0x74, t) Verwenden sie comma oder plus , wenn sie ein , oder ein + ausgeben wollen. Verwenden sie delay <n> um eine Verz\u00f6gerung einzuf\u00fcgen, wobei <n> die Anzahl (float oder integer) der Sekunden ist. Wenn <n> nicht angegeben wird, wird eine Standardverz\u00f6gerung von 0.5 Sekundenverwendet. Wenn <n> nicht als g\u00fcltige Zahl erkannt wird, erfolgt keine Verz\u00f6gerung. Beispiele F11 - dr\u00fcckt F11. Wenn der Fokus auf einem Browser ist, schaltet das zwischen Vollbild und Normalbild hin und her. alt+F4 - schlie\u00dft das aktuelle Fenster. ctrl+w - schlie\u00dft den aktuellen Browser-Tab. cmd+left - verkleinert das Fenster auf seine linke H\u00e4lfte. Achtung, cmd ist die super Taste (entsprechend der Windows Taste). alt+plus - dr\u00fcckt die alt und die + Taste gleichzeitin. alt+delay+F4 - dr\u00fccke alt, warte dann 0.5 Sekunden, dr\u00fccke dann F4. Lass beide Tasten los. 1,delay,delay,2,delay,delay,3 - tippe 123 mit 1-Sekunden Pausen zwischen den Tastendrucken (unter Verwendung der Standardpausen). 1,delay 1,2,delay 1,3 - tippe 123 mit 1-Sekunden Pausen zwischen den Tastendrucken (unter Verwendung selbst definierter Pausen). e,c,h,o,space,\",t,e,s,t,\",enter - tippe echo \"test\" und dr\u00fccke Enter. ctrl+alt+0x74 - \u00f6ffnet ein neues Terminalfenster. 0x74 ist der Tasten-Code von t . TIP: Verwenden sie den Tasten-Code, wenn der Buchstabe nicht funktioniert. 0xffe5 - Caps Lock umschalten. 0xffaf - Die / Taste im Ziffernblock der Tastatur. Die Standardliste der Tasten finden sie im source-code . Die super Taste (Windows-Taste) kann bei einigen Linux-Versionen problematisch sein. Statt der Tastendruck-Funktion k\u00f6nnen sie dann die Befehls-Funktion wie folgt benutzen. In diesem Beispiel wollen wir die Super Taste und 4 dr\u00fccken, was die Anwendung Nummer 4 ihrer Favoriten startet (Ubuntu). xdotool key \"Super_L+4\" Text schreiben: Das ist ein schneller Weg um l\u00e4ngere Textst\u00fccke zu schreiben (Wort f\u00fcr Wort). Beachten sie, dass anders als in der Tastendruck-Funtion, hier keine Spezial-(Modifikations-)Tasten akzeptiert werden. Wenn sie jedoch Enter dr\u00fccken (um eine neue Zeile zu beginnen) wird auch Enter bei der Ausgabe ausgegeben. Beispiele Unfortunately that ' s a hard no . Kind regards , Joe bekannte Probleme Stellen sie sicher, dass sie die neueste Version verwenden mit pip3 show streamdeck-ui . Vergleichen sie es mit: Streamdeck verwendet pynput zur Simulation derf Tasten-Bet\u00e4tigungen wodurch ordentliche Unterst\u00fctzung f\u00fcr Wayland fehlt. Im Allgemeinen werden sie gute Ergebnisse bei Verwendung von X haben (Ubuntu/Linux Mint). Dieser thread l\u00f6nnte n\u00fctzlich sein. Taste dr\u00fccken oder Text schreiben funktioniert nicht unter Fedora (au\u00dferhalb von streamdeck selbst), was nicht besonders hilfreich ist. Die Befehls-Funktion kann aber trotzdem eine Menge. Version 1.0.2 hat keine Fehler-Behandlung bei der Befehls- und der Taste dr\u00fccken Funktion. Deshalb m\u00fcssen sie vorsichtig sein - ein ung\u00fcltiger Befehl oder Tastendruck stoppt auch alle anderen Prozesse. Bitte upgraden sie zur neuesten Version. Einige Anwender haben berichtet, dass das Stream Deck Ger\u00e4tnicht an allen USB-ports funktioniert, da es einiges an Strom verbraucht und/oder strenge Bandbreitenanforderungen hat. Versuchen sie einen anderen Anschlu\u00df. Wenn sie einen shell script mit der Befehls-Funktion ausf\u00fchren, vergessen sie nicht das shebang f\u00fcr die entsprechende Sprache am Anfangihrer Datei haben. #!/bin/bash oder #!/usr/bin/python3 etc. Das streamdeck k\u00f6nnte sich andernfalls unter einigen Distros aufh\u00e4ngen.","title":"Readme De"},{"location":"README-de/#eigenschaften","text":"Linux Kompatibel : Erm\u00f6glicht die Nutzung aller Stream Deck Ger\u00e4te mit Linux ohne code zu ben\u00f6tigen. Mehrere Ger\u00e4te : Erm\u00f6glicht die Verbindung und Konfiguration mehrere Stream Deck Ger\u00e4te an einem Computer. Helligkeits-Steuerung : Unterst\u00fctzt die Einstellung der Helligkeit von der Konfigurations-Oberfl\u00e4che und den Kn\u00f6pfen am Ger\u00e4t selbst. Konfigurierbares Tastenbild : Icon + Text, nur Icon und nur Text sind pro Taste des Stream Decks konfigurierbar. Multi-Action Unterst\u00fctzung : Kommandos starten, Text schreiben und Hotkey-Kombinationen dr\u00fccken mit einem einzigen Tastendruck auf dem Stream Deck. Tasten-Seiten : streamdeck_ui bietet mehrere Seiten von Tasten mit dynamischer Einstellung von Tasten zum Umschalten zwischen ihnen. Automatisches Wiederverbinden : Das Ger\u00e4t wird automatisch und problemlos wieder verbunden, falls das Ger\u00e4t ab- und wieder angesteckt wurde. Import/Export : Bietet das Abspeichern und Wiederherstellen ganzer Stream Deck Konfigurationen. Die Kommunikation mit dem Streamdeck erfolgt durch die Python Elgato Stream Deck Library .","title":"Eigenschaften"},{"location":"README-de/#linux-schnellstart","text":"Python 3.8 wird ben\u00f6tigt. Sie k\u00f6nnen die Version, die sie installiert haben, \u00fcberpr\u00fcfen mit python3 --version .","title":"Linux Schnellstart"},{"location":"README-de/#vorgefertigte-skripte","text":"Es gibt fertige Skripte um streamdeck_ui auf Debian/Ubuntu und Fedora zu installieren.","title":"Vorgefertigte Skripte"},{"location":"README-de/#manuelle-installation","text":"Um streamdeck_ui unter Linux zu verwenden, m\u00fcssen einige System-Bibliotheken als Voraussetzung installiert werden. Die Namen dieser Bibliotheken k\u00f6nnen, abh\u00e4ngig von ihrem Betriebssystem, variieren. Debian / Ubuntu: sudo apt install python3-pip libhidapi-libusb0 libxcb-xinerama0 Fedora: sudo dnf install python3-pip python3-devel hidapi Wenn sie die GNOME shell verwenden, k\u00f6nnten sie eine Erweiterung, die den KStatusNotifierItem/AppIndicator Support bietet, manuell installieren m\u00fcssen um das Tray-Icon anzuzeigen. Um streamdeck_ui ohne root-Rechte zu benutzen, m\u00fcssen sie ihrem user vollen Zugriff auf das Ger\u00e4t erlauben. F\u00fcgen sie die folgenden udev rules mit Hilfe ihres Editors hinzu: sudoedit /etc/udev/rules.d/70-streamdeck.rules # Wenn das nicht funktioniert, versuchen sie: sudo nano /etc/udev/rules.d/70-streamdeck.rules F\u00fcgen sie die folgenden Zeilen ein: SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", TAG+=\"uaccess\" Aktivieren sie die Regeln: sudo udevadm trigger Die Installation der Anwendung selbst erfolgt via pip: pip3 install streamdeck-ui --user Stellen sie sicher, dass $HOME/.local/bin in ihrem PATH enthalten ist. Wenn das nicht der Fall ist, f\u00fcgen sie PATH=$PATH:$HOME/.local/bin an das Ende ihrer shell Konfigurationsdatei (wahrscheinlich .bashrc in ihrem home directory) hinzu. Jetzt k\u00f6nnen sie streamdeck starten um mit der Konfiguration zu beginnen. streamdeck Es wird empfohlen streamdeck in die Autostart-Liste ihrer Fenster-Umgebung aufzunehmen. Wenn sie es verwenden wollen ohne dass das Benutzer-Interface angezeigt wird, verwenden sie streamdeck -n .","title":"Manuelle Installation"},{"location":"README-de/#allgemeiner-schnellstart","text":"Auf anderen Betriebssystemen m\u00fcssen sie die ben\u00f6tigten Abh\u00e4ngigkeiten der Bibliothek installieren. Danach verwenden sie pip zur Installation der Anwendung: pip3 install streamdeck-ui --user streamdeck Beachten sie auch die Anleitungen f\u00fcr Arch/Manjaro CentOS Fedora openSUSE Ubuntu/Mint","title":"Allgemeiner Schnellstart"},{"location":"README-de/#hilfe","text":"","title":"Hilfe"},{"location":"README-de/#befehl-command","text":"Geben sie einen Befehl in das Feld \"Command\" ein, um ihn auszuf\u00fchren. In Ubuntu/Fedora starten sie ein Terminal mit gnome-terminal , obs startet OBS.","title":"Befehl (Command)"},{"location":"README-de/#beispiele-ubuntu","text":"Sie k\u00f6nnen ein tool wie xdotool verwenden, um mit anderen Programmen zu interagieren. Finden sie das Fenster, das mit Meet - beginnt, und setzen sie den Fokus darauf. Das hilft ihnen, wenn sie eine Google Meet Sitzung auf irgend einem Tab haben, die aber hinter anderen Fenstern verloren gegangen ist. xdotool search --name '^Meet - .+$' windowactivate Der Meeting-Tab muss aktiv sein wenn sie mehrere Tabs offen haben, da der Fenstertitel vom derzeit aktiven Tab gesetzt wird. Finden sie das Fenster, das mit Meet - beginnt, und senden sie ctrl+d dorthin. Das bewirkt das Umschalten der Stummschaltung (mute button) in Google Meet. xdotool search --name '^Meet - .+$' windowactivate --sync key ctrl+d Drehen sie die System-Lautst\u00e4rke um einen gewissen Prozentsatz hoch (oder runter). Wir nehmen an, sie verwenden PulseAudio/Alsa Mixer. amixer -D pulse sset Master 20%+ Wenn sie einen Befehl abgeben wollen der shell-script spezifische Dinge wie && oder | enth\u00e4lt, dann starten sie ihn via bash. Dieser Befehl wird de Fokus auf Firefox setzen, indem es wmctrl nutzt, und dann den Fokus auf den ersten Tab verschieben: bash -c \"wmctrl -a firefox && xdotool key alt+1\"","title":"Beispiele (Ubuntu)"},{"location":"README-de/#tasten-drucken","text":"Simuliert Tasten-Kombinationen (hot keys). Grunds\u00e4tzlich werden Tasten, die gleichzeitig bet\u00e4tigt werden, mit einem + Zeichen verbunden. Trennen sie Tasten-Kombinationen mit einem , , wenn zus\u00e4tzliche Kombinationen ben\u00f6tigt werden. Die Zeichenfolge alt+F4,f zum Beispiel bedeutet dr\u00fccke und halte alt , gefolgt von F4 und lass dann beide los. Dr\u00fccke anschlie\u00dfend f und lass es wieder los. Sie k\u00f6nnen auch einen Tasten-Code im hex Format verwenden, 0x74 ist zum Beispiel der Tasten-Code f\u00fcr t . Dieser Wert wird auch manchmal als keysym bezeichnet. Sie k\u00f6nnen das tool xev verwenden um den Key-Code einer Taste zu ermitteln. Suchen sie in der Ausgabe nach keysym hex value , zum Beispiel (keysym 0x74, t) Verwenden sie comma oder plus , wenn sie ein , oder ein + ausgeben wollen. Verwenden sie delay <n> um eine Verz\u00f6gerung einzuf\u00fcgen, wobei <n> die Anzahl (float oder integer) der Sekunden ist. Wenn <n> nicht angegeben wird, wird eine Standardverz\u00f6gerung von 0.5 Sekundenverwendet. Wenn <n> nicht als g\u00fcltige Zahl erkannt wird, erfolgt keine Verz\u00f6gerung.","title":"Tasten dr\u00fccken"},{"location":"README-de/#beispiele","text":"F11 - dr\u00fcckt F11. Wenn der Fokus auf einem Browser ist, schaltet das zwischen Vollbild und Normalbild hin und her. alt+F4 - schlie\u00dft das aktuelle Fenster. ctrl+w - schlie\u00dft den aktuellen Browser-Tab. cmd+left - verkleinert das Fenster auf seine linke H\u00e4lfte. Achtung, cmd ist die super Taste (entsprechend der Windows Taste). alt+plus - dr\u00fcckt die alt und die + Taste gleichzeitin. alt+delay+F4 - dr\u00fccke alt, warte dann 0.5 Sekunden, dr\u00fccke dann F4. Lass beide Tasten los. 1,delay,delay,2,delay,delay,3 - tippe 123 mit 1-Sekunden Pausen zwischen den Tastendrucken (unter Verwendung der Standardpausen). 1,delay 1,2,delay 1,3 - tippe 123 mit 1-Sekunden Pausen zwischen den Tastendrucken (unter Verwendung selbst definierter Pausen). e,c,h,o,space,\",t,e,s,t,\",enter - tippe echo \"test\" und dr\u00fccke Enter. ctrl+alt+0x74 - \u00f6ffnet ein neues Terminalfenster. 0x74 ist der Tasten-Code von t . TIP: Verwenden sie den Tasten-Code, wenn der Buchstabe nicht funktioniert. 0xffe5 - Caps Lock umschalten. 0xffaf - Die / Taste im Ziffernblock der Tastatur. Die Standardliste der Tasten finden sie im source-code . Die super Taste (Windows-Taste) kann bei einigen Linux-Versionen problematisch sein. Statt der Tastendruck-Funktion k\u00f6nnen sie dann die Befehls-Funktion wie folgt benutzen. In diesem Beispiel wollen wir die Super Taste und 4 dr\u00fccken, was die Anwendung Nummer 4 ihrer Favoriten startet (Ubuntu). xdotool key \"Super_L+4\"","title":"Beispiele"},{"location":"README-de/#text-schreiben","text":"Das ist ein schneller Weg um l\u00e4ngere Textst\u00fccke zu schreiben (Wort f\u00fcr Wort). Beachten sie, dass anders als in der Tastendruck-Funtion, hier keine Spezial-(Modifikations-)Tasten akzeptiert werden. Wenn sie jedoch Enter dr\u00fccken (um eine neue Zeile zu beginnen) wird auch Enter bei der Ausgabe ausgegeben.","title":"Text schreiben:"},{"location":"README-de/#beispiele_1","text":"Unfortunately that ' s a hard no . Kind regards , Joe","title":"Beispiele"},{"location":"README-de/#bekannte-probleme","text":"Stellen sie sicher, dass sie die neueste Version verwenden mit pip3 show streamdeck-ui . Vergleichen sie es mit: Streamdeck verwendet pynput zur Simulation derf Tasten-Bet\u00e4tigungen wodurch ordentliche Unterst\u00fctzung f\u00fcr Wayland fehlt. Im Allgemeinen werden sie gute Ergebnisse bei Verwendung von X haben (Ubuntu/Linux Mint). Dieser thread l\u00f6nnte n\u00fctzlich sein. Taste dr\u00fccken oder Text schreiben funktioniert nicht unter Fedora (au\u00dferhalb von streamdeck selbst), was nicht besonders hilfreich ist. Die Befehls-Funktion kann aber trotzdem eine Menge. Version 1.0.2 hat keine Fehler-Behandlung bei der Befehls- und der Taste dr\u00fccken Funktion. Deshalb m\u00fcssen sie vorsichtig sein - ein ung\u00fcltiger Befehl oder Tastendruck stoppt auch alle anderen Prozesse. Bitte upgraden sie zur neuesten Version. Einige Anwender haben berichtet, dass das Stream Deck Ger\u00e4tnicht an allen USB-ports funktioniert, da es einiges an Strom verbraucht und/oder strenge Bandbreitenanforderungen hat. Versuchen sie einen anderen Anschlu\u00df. Wenn sie einen shell script mit der Befehls-Funktion ausf\u00fchren, vergessen sie nicht das shebang f\u00fcr die entsprechende Sprache am Anfangihrer Datei haben. #!/bin/bash oder #!/usr/bin/python3 etc. Das streamdeck k\u00f6nnte sich andernfalls unter einigen Distros aufh\u00e4ngen.","title":"bekannte Probleme"},{"location":"docs/troubleshooting/","text":"Troubleshooting Note you may need to use python , python3 or python3.8 in the commands shown below, depending on your distribution. The examples simply use python for simplicity's sake. Basics There are four important things you need to get a working system. You need a working Python 3.8 or higher with pip installed. You need to install hidapi. You need a udev rule that allows access to your Stream Deck. You need to install streamdeck-ui and all its dependencies with pip. Key Press and Write Text do not work Streamdeck uses pynput for simulating Key Presses but it was not designed for Wayland . Generally your results will be good when using X, but it seems like most new releases of Linux are switching away from it. ImportError If you get an error such as: ImportError : cannot import name 'QtWidgets' from 'PySide6' This usually means a problem with PySide6. Try resolving with this: python -m pip install --force-reinstall --no-cache-dir pyside6 No System Tray Indicator You may receive an error like this on start-up: qt . core . qobject . connect : QObject :: connect : No such signal QPlatformNativeInterface :: systemTrayWindowChanged ( QScreen * ) This is because gnome does not provide a System Tray out the box and you will need an extension KStatusNotifierItem/AppIndicator Support to make the system tray icon show up. Could not load the Qt platform plugin \"xcb\" You may get the following error: qt . qpa . plugin : Could not load the Qt platform plugin \"xcb\" in \"\" even though it was found . This application failed to start because no Qt platform plugin could be initialized . Reinstalling the application may fix this problem . On Ubuntu, resolve this problem by installing: sudo apt install libxcb-xinerama0 You may encounter a similar error where the cause is \"libxcb-cursor.so.0: cannot open shared object file: No such file or directory\". This can be resolved by installing the libxcb-cursor0 package. On Arch, resolve this problem by installing: sudo pacman -S qt6-base You could also try qt5-x11extras if qt6-base didn't work for you. ModuleNotFoundError: No module named 'pkg_resources' This module is part of setuptools but may be missing on your system. python - m pip install setuptools","title":"Troubleshooting"},{"location":"docs/troubleshooting/#troubleshooting","text":"Note you may need to use python , python3 or python3.8 in the commands shown below, depending on your distribution. The examples simply use python for simplicity's sake.","title":"Troubleshooting"},{"location":"docs/troubleshooting/#basics","text":"There are four important things you need to get a working system. You need a working Python 3.8 or higher with pip installed. You need to install hidapi. You need a udev rule that allows access to your Stream Deck. You need to install streamdeck-ui and all its dependencies with pip.","title":"Basics"},{"location":"docs/troubleshooting/#key-press-and-write-text-do-not-work","text":"Streamdeck uses pynput for simulating Key Presses but it was not designed for Wayland . Generally your results will be good when using X, but it seems like most new releases of Linux are switching away from it.","title":"Key Press and Write Text do not work"},{"location":"docs/troubleshooting/#importerror","text":"If you get an error such as: ImportError : cannot import name 'QtWidgets' from 'PySide6' This usually means a problem with PySide6. Try resolving with this: python -m pip install --force-reinstall --no-cache-dir pyside6","title":"ImportError"},{"location":"docs/troubleshooting/#no-system-tray-indicator","text":"You may receive an error like this on start-up: qt . core . qobject . connect : QObject :: connect : No such signal QPlatformNativeInterface :: systemTrayWindowChanged ( QScreen * ) This is because gnome does not provide a System Tray out the box and you will need an extension KStatusNotifierItem/AppIndicator Support to make the system tray icon show up.","title":"No System Tray Indicator"},{"location":"docs/troubleshooting/#could-not-load-the-qt-platform-plugin-xcb","text":"You may get the following error: qt . qpa . plugin : Could not load the Qt platform plugin \"xcb\" in \"\" even though it was found . This application failed to start because no Qt platform plugin could be initialized . Reinstalling the application may fix this problem . On Ubuntu, resolve this problem by installing: sudo apt install libxcb-xinerama0 You may encounter a similar error where the cause is \"libxcb-cursor.so.0: cannot open shared object file: No such file or directory\". This can be resolved by installing the libxcb-cursor0 package. On Arch, resolve this problem by installing: sudo pacman -S qt6-base You could also try qt5-x11extras if qt6-base didn't work for you.","title":"Could not load the Qt platform plugin \"xcb\""},{"location":"docs/troubleshooting/#modulenotfounderror-no-module-named-pkg_resources","text":"This module is part of setuptools but may be missing on your system. python - m pip install setuptools","title":"ModuleNotFoundError: No module named 'pkg_resources'"},{"location":"docs/contributing/1.-contributing-guide/","text":"Contributing to streamdeck_ui Looking for a useful open source project to contribute to? Want your contributions to be warmly welcomed and acknowledged? Welcome! You have found the right place. Getting streamdeck_ui set up for local development The first step when contributing to any project is getting it set up on your local machine. streamdeck_ui aims to make this as simple as possible. Account Requirements: A valid GitHub account Base System Requirements: Python3.8+ poetry bash or a bash compatible shell (should be auto-installed on Linux / Mac) Once you have verified that you system matches the base requirements you can start to get the project working by following these steps: Fork the project on GitHub . Clone your fork to your local file system: git clone https://github.com/$GITHUB_ACCOUNT/streamdeck_ui.git cd streamdeck_ui poetry install Making a contribution Congrats! You're now ready to make a contribution! Use the following as a guide to help you reach a successful pull-request: Check the issues page on GitHub to see if the task you want to complete is listed there. If it's listed there, write a comment letting others know you are working on it. If it's not listed in GitHub issues, go ahead and log a new issue. Then add a comment letting everyone know you have it under control. If you're not sure if it's something that is good for the main streamdeck_ui project and want immediate feedback, you can discuss it here . Create an issue branch for your local work git checkout -b issue/$ISSUE-NUMBER . Do your magic here. Ensure your code matches the HOPE-8 Coding Standard used by the project. Submit a pull request to the main project repository via GitHub. Thanks for the contribution! It will quickly get reviewed, and, once accepted, will result in your name being added to the acknowledgments list :). Thank you! I can not tell you how thankful I am for the hard work done by streamdeck_ui contributors like you . Thank you! ~Timothy Crosley","title":"1. Contributing Guide"},{"location":"docs/contributing/1.-contributing-guide/#contributing-to-streamdeck_ui","text":"Looking for a useful open source project to contribute to? Want your contributions to be warmly welcomed and acknowledged? Welcome! You have found the right place.","title":"Contributing to streamdeck_ui"},{"location":"docs/contributing/1.-contributing-guide/#getting-streamdeck_ui-set-up-for-local-development","text":"The first step when contributing to any project is getting it set up on your local machine. streamdeck_ui aims to make this as simple as possible. Account Requirements: A valid GitHub account Base System Requirements: Python3.8+ poetry bash or a bash compatible shell (should be auto-installed on Linux / Mac) Once you have verified that you system matches the base requirements you can start to get the project working by following these steps: Fork the project on GitHub . Clone your fork to your local file system: git clone https://github.com/$GITHUB_ACCOUNT/streamdeck_ui.git cd streamdeck_ui poetry install","title":"Getting streamdeck_ui set up for local development"},{"location":"docs/contributing/1.-contributing-guide/#making-a-contribution","text":"Congrats! You're now ready to make a contribution! Use the following as a guide to help you reach a successful pull-request: Check the issues page on GitHub to see if the task you want to complete is listed there. If it's listed there, write a comment letting others know you are working on it. If it's not listed in GitHub issues, go ahead and log a new issue. Then add a comment letting everyone know you have it under control. If you're not sure if it's something that is good for the main streamdeck_ui project and want immediate feedback, you can discuss it here . Create an issue branch for your local work git checkout -b issue/$ISSUE-NUMBER . Do your magic here. Ensure your code matches the HOPE-8 Coding Standard used by the project. Submit a pull request to the main project repository via GitHub. Thanks for the contribution! It will quickly get reviewed, and, once accepted, will result in your name being added to the acknowledgments list :).","title":"Making a contribution"},{"location":"docs/contributing/1.-contributing-guide/#thank-you","text":"I can not tell you how thankful I am for the hard work done by streamdeck_ui contributors like you . Thank you! ~Timothy Crosley","title":"Thank you!"},{"location":"docs/contributing/2.-coding-standard/","text":"HOPE 8 -- Style Guide for Hug Code HOPE: 8 Title: Style Guide for Hug Code Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 19-May-2019 Updated: 17-August-2019 Introduction This document gives coding conventions for the Hug code comprising the Hug core as well as all official interfaces, extensions, and plugins for the framework. Optionally, projects that use Hug are encouraged to follow this HOPE and link to it as a reference. PEP 8 Foundation All guidelines in this document are in addition to those defined in Python's PEP 8 and PEP 257 guidelines. Line Length Too short of lines discourage descriptive variable names where they otherwise make sense. Too long of lines reduce overall readability and make it hard to compare 2 files side by side. There is no perfect number: but for Hug, we've decided to cap the lines at 100 characters. Descriptive Variable names Naming things is hard. Hug has a few strict guidelines on the usage of variable names, which hopefully will reduce some of the guesswork: - No one character variable names. - Except for x, y, and z as coordinates. - It's not okay to override built-in functions. - Except for id . Guido himself thought that shouldn't have been moved to the system module. It's too commonly used, and alternatives feel very artificial. - Avoid Acronyms, Abbreviations, or any other short forms - unless they are almost universally understand. Adding new modules New modules added to the a project that follows the HOPE-8 standard should all live directly within the base PROJECT_NAME/ directory without nesting. If the modules are meant only for internal use within the project, they should be prefixed with a leading underscore. For example, def _internal_function. Modules should contain a docstring at the top that gives a general explanation of the purpose and then restates the project's use of the MIT license. There should be a tests/test_$MODULE_NAME.py file created to correspond to every new module that contains test coverage for the module. Ideally, tests should be 1:1 (one test object per code object, one test method per code method) to the extent cleanly possible. Automated Code Cleaners All code submitted to Hug should be formatted using Black and isort. Black should be run with the line length set to 100, and isort with Black compatible settings in place. Automated Code Linting All code submitted to hug should run through the following tools: Black and isort verification. Flake8 flake8-bugbear Bandit pep8-naming vulture safety","title":"2. Coding Standard"},{"location":"docs/contributing/2.-coding-standard/#hope-8-style-guide-for-hug-code","text":"HOPE: 8 Title: Style Guide for Hug Code Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 19-May-2019 Updated: 17-August-2019","title":"HOPE 8 -- Style Guide for Hug Code"},{"location":"docs/contributing/2.-coding-standard/#introduction","text":"This document gives coding conventions for the Hug code comprising the Hug core as well as all official interfaces, extensions, and plugins for the framework. Optionally, projects that use Hug are encouraged to follow this HOPE and link to it as a reference.","title":"Introduction"},{"location":"docs/contributing/2.-coding-standard/#pep-8-foundation","text":"All guidelines in this document are in addition to those defined in Python's PEP 8 and PEP 257 guidelines.","title":"PEP 8 Foundation"},{"location":"docs/contributing/2.-coding-standard/#line-length","text":"Too short of lines discourage descriptive variable names where they otherwise make sense. Too long of lines reduce overall readability and make it hard to compare 2 files side by side. There is no perfect number: but for Hug, we've decided to cap the lines at 100 characters.","title":"Line Length"},{"location":"docs/contributing/2.-coding-standard/#descriptive-variable-names","text":"Naming things is hard. Hug has a few strict guidelines on the usage of variable names, which hopefully will reduce some of the guesswork: - No one character variable names. - Except for x, y, and z as coordinates. - It's not okay to override built-in functions. - Except for id . Guido himself thought that shouldn't have been moved to the system module. It's too commonly used, and alternatives feel very artificial. - Avoid Acronyms, Abbreviations, or any other short forms - unless they are almost universally understand.","title":"Descriptive Variable names"},{"location":"docs/contributing/2.-coding-standard/#adding-new-modules","text":"New modules added to the a project that follows the HOPE-8 standard should all live directly within the base PROJECT_NAME/ directory without nesting. If the modules are meant only for internal use within the project, they should be prefixed with a leading underscore. For example, def _internal_function. Modules should contain a docstring at the top that gives a general explanation of the purpose and then restates the project's use of the MIT license. There should be a tests/test_$MODULE_NAME.py file created to correspond to every new module that contains test coverage for the module. Ideally, tests should be 1:1 (one test object per code object, one test method per code method) to the extent cleanly possible.","title":"Adding new modules"},{"location":"docs/contributing/2.-coding-standard/#automated-code-cleaners","text":"All code submitted to Hug should be formatted using Black and isort. Black should be run with the line length set to 100, and isort with Black compatible settings in place.","title":"Automated Code Cleaners"},{"location":"docs/contributing/2.-coding-standard/#automated-code-linting","text":"All code submitted to hug should run through the following tools: Black and isort verification. Flake8 flake8-bugbear Bandit pep8-naming vulture safety","title":"Automated Code Linting"},{"location":"docs/contributing/3.-code-of-conduct/","text":"HOPE 11 -- Code of Conduct HOPE: 11 Title: Code of Conduct Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 17-August-2019 Updated: 17-August-2019 Abstract Defines the Code of Conduct for Hug and all related projects. Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting timothy.crosley@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Confidentiality will be maintained with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the [Contributor Covenant][https://www.contributor-covenant.org], version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"3. Code Of Conduct"},{"location":"docs/contributing/3.-code-of-conduct/#hope-11-code-of-conduct","text":"HOPE: 11 Title: Code of Conduct Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 17-August-2019 Updated: 17-August-2019","title":"HOPE 11 -- Code of Conduct"},{"location":"docs/contributing/3.-code-of-conduct/#abstract","text":"Defines the Code of Conduct for Hug and all related projects.","title":"Abstract"},{"location":"docs/contributing/3.-code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"docs/contributing/3.-code-of-conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"docs/contributing/3.-code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"docs/contributing/3.-code-of-conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"docs/contributing/3.-code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting timothy.crosley@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Confidentiality will be maintained with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"docs/contributing/3.-code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the [Contributor Covenant][https://www.contributor-covenant.org], version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"docs/contributing/4.-acknowledgements/","text":"Contributors Core Developers Pieter Venter (@dodgyrabbit) Timothy Crosley (@timothycrosley) Notable Bug Reporters - Code Contributors - Documenters @xorbital Chris Rogers (@chrisprad) @simonCor Afonso F. Garcia (@AfonsoFGarcia) A sincere thanks to everyone who helps make streamdeck_ui into a great Python3 project! ~Timothy Crosley","title":"4. Acknowledgements"},{"location":"docs/contributing/4.-acknowledgements/#contributors","text":"","title":"Contributors"},{"location":"docs/contributing/4.-acknowledgements/#core-developers","text":"Pieter Venter (@dodgyrabbit) Timothy Crosley (@timothycrosley)","title":"Core Developers"},{"location":"docs/contributing/4.-acknowledgements/#notable-bug-reporters","text":"-","title":"Notable Bug Reporters"},{"location":"docs/contributing/4.-acknowledgements/#code-contributors","text":"-","title":"Code Contributors"},{"location":"docs/contributing/4.-acknowledgements/#documenters","text":"@xorbital Chris Rogers (@chrisprad) @simonCor Afonso F. Garcia (@AfonsoFGarcia) A sincere thanks to everyone who helps make streamdeck_ui into a great Python3 project! ~Timothy Crosley","title":"Documenters"},{"location":"docs/installation/arch/","text":"Installing on Arch This has been tested on Arch with XFCE, Manjaro in Feb 2023. Install hidapi sudo pacman -S hidapi python-pip qt6-base Set path You need to add ~/.local/bin to your path. Be sure to add this to your .bashrc (or equivalent) file so it automatically sets it for you in future. PATH=$PATH:$HOME/.local/bin Upgrade pip You may need to upgrade pip, using pip. On Arch this is usually not required. Setuptools is required but may not be installed on Arch. python - m pip install -- upgrade pip python - m pip install setuptools Configure access to Elgato devices The following will create a file called /etc/udev/rules.d/70-streamdeck.rules and add the following text to it: SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", TAG+=\"uaccess\" . Creating this file adds a udev rule that provides your user with access to USB devices created by Elgato. sudo sh -c 'echo \"SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", TAG+=\\\"uaccess\\\"\" > /etc/udev/rules.d/70-streamdeck.rules' For the rule to take immediate effect, run the following command: sudo udevadm trigger If the software is having problems later to detect the Stream Deck, you can try unplugging/plugging it back in. Install Stream Deck UI python -m pip install streamdeck-ui --user Launch with streamdeck See troubleshooting for tips if you're stuck.","title":"Arch"},{"location":"docs/installation/arch/#installing-on-arch","text":"This has been tested on Arch with XFCE, Manjaro in Feb 2023.","title":"Installing on Arch"},{"location":"docs/installation/arch/#install-hidapi","text":"sudo pacman -S hidapi python-pip qt6-base","title":"Install hidapi"},{"location":"docs/installation/arch/#set-path","text":"You need to add ~/.local/bin to your path. Be sure to add this to your .bashrc (or equivalent) file so it automatically sets it for you in future. PATH=$PATH:$HOME/.local/bin","title":"Set path"},{"location":"docs/installation/arch/#upgrade-pip","text":"You may need to upgrade pip, using pip. On Arch this is usually not required. Setuptools is required but may not be installed on Arch. python - m pip install -- upgrade pip python - m pip install setuptools","title":"Upgrade pip"},{"location":"docs/installation/arch/#configure-access-to-elgato-devices","text":"The following will create a file called /etc/udev/rules.d/70-streamdeck.rules and add the following text to it: SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", TAG+=\"uaccess\" . Creating this file adds a udev rule that provides your user with access to USB devices created by Elgato. sudo sh -c 'echo \"SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", TAG+=\\\"uaccess\\\"\" > /etc/udev/rules.d/70-streamdeck.rules' For the rule to take immediate effect, run the following command: sudo udevadm trigger If the software is having problems later to detect the Stream Deck, you can try unplugging/plugging it back in.","title":"Configure access to Elgato devices"},{"location":"docs/installation/arch/#install-stream-deck-ui","text":"python -m pip install streamdeck-ui --user Launch with streamdeck See troubleshooting for tips if you're stuck.","title":"Install Stream Deck UI"},{"location":"docs/installation/centos/","text":"Installing on CentOS This has been tested on CentOS 7, 8. Install hidapi sudo yum install epel-release sudo yum update sudo yum install hidapi Note for CentOS7 If you're having trouble installing hdapi, try installing the epel from the Fedora site as follows: sudo rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm and try the hdapi install again. Install python 3.8 CentOS 7/8 ships with Python 3.6. We need to build version 3.8 (or later if you prefer). sudo yum -y groupinstall \"Development Tools\" sudo yum -y install openssl-devel bzip2-devel libffi-devel wget https://www.python.org/ftp/python/3.8.9/Python-3.8.9.tgz tar xvf Python-3.8.9.tgz cd Python-3.8.9/ ./configure --enable-optimizations sudo make altinstall Upgrade pip You need to upgrade pip, using pip. In my experience, old versions of pip may fail to properly install some of the required Python dependencies. python3.8 -m pip install --upgrade pip Configure access to Elgato devices The following will create a file called /etc/udev/rules.d/70-streamdeck.rules and add the following text to it: SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", TAG+=\"uaccess\" . Creating this file adds a udev rule that provides your user with access to USB devices created by Elgato. sudo sh -c 'echo \"SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", TAG+=\\\"uaccess\\\"\" > /etc/udev/rules.d/70-streamdeck.rules' For the rule to take immediate effect, run the following command: sudo udevadm trigger If the software is having problems later to detect the Stream Deck, you can try unplugging/plugging it back in. Install Stream Deck UI python3.8 -m pip install streamdeck-ui --user Launch with streamdeck See troubleshooting for tips if you're stuck.","title":"Centos"},{"location":"docs/installation/centos/#installing-on-centos","text":"This has been tested on CentOS 7, 8.","title":"Installing on CentOS"},{"location":"docs/installation/centos/#install-hidapi","text":"sudo yum install epel-release sudo yum update sudo yum install hidapi","title":"Install hidapi"},{"location":"docs/installation/centos/#note-for-centos7","text":"If you're having trouble installing hdapi, try installing the epel from the Fedora site as follows: sudo rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm and try the hdapi install again.","title":"Note for CentOS7"},{"location":"docs/installation/centos/#install-python-38","text":"CentOS 7/8 ships with Python 3.6. We need to build version 3.8 (or later if you prefer). sudo yum -y groupinstall \"Development Tools\" sudo yum -y install openssl-devel bzip2-devel libffi-devel wget https://www.python.org/ftp/python/3.8.9/Python-3.8.9.tgz tar xvf Python-3.8.9.tgz cd Python-3.8.9/ ./configure --enable-optimizations sudo make altinstall","title":"Install python 3.8"},{"location":"docs/installation/centos/#upgrade-pip","text":"You need to upgrade pip, using pip. In my experience, old versions of pip may fail to properly install some of the required Python dependencies. python3.8 -m pip install --upgrade pip","title":"Upgrade pip"},{"location":"docs/installation/centos/#configure-access-to-elgato-devices","text":"The following will create a file called /etc/udev/rules.d/70-streamdeck.rules and add the following text to it: SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", TAG+=\"uaccess\" . Creating this file adds a udev rule that provides your user with access to USB devices created by Elgato. sudo sh -c 'echo \"SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", TAG+=\\\"uaccess\\\"\" > /etc/udev/rules.d/70-streamdeck.rules' For the rule to take immediate effect, run the following command: sudo udevadm trigger If the software is having problems later to detect the Stream Deck, you can try unplugging/plugging it back in.","title":"Configure access to Elgato devices"},{"location":"docs/installation/centos/#install-stream-deck-ui","text":"python3.8 -m pip install streamdeck-ui --user Launch with streamdeck See troubleshooting for tips if you're stuck.","title":"Install Stream Deck UI"},{"location":"docs/installation/fedora/","text":"Installing on Fedora This has been tested on Fedora 36, 37. Install hidapi sudo dnf install python3-pip python3-devel hidapi Upgrade pip You need to upgrade pip, using pip. In my experience, old versions of pip may fail to properly install some of the required Python dependencies. python -m pip install --upgrade pip Configure access to Elgato devices The following will create a file called /etc/udev/rules.d/70-streamdeck.rules and add the following text to it: SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", TAG+=\"uaccess\" . Creating this file adds a udev rule that provides your user with access to USB devices created by Elgato. sudo sh -c 'echo \"SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", TAG+=\\\"uaccess\\\"\" > /etc/udev/rules.d/70-streamdeck.rules' For the rule to take immediate effect, run the following command: sudo udevadm trigger If the software is having problems later to detect the Stream Deck, you can try unplugging/plugging it back in. Install Stream Deck UI python -m pip install streamdeck-ui --user See system tray installation. Launch with streamdeck See troubleshooting for tips if you're stuck.","title":"Fedora"},{"location":"docs/installation/fedora/#installing-on-fedora","text":"This has been tested on Fedora 36, 37.","title":"Installing on Fedora"},{"location":"docs/installation/fedora/#install-hidapi","text":"sudo dnf install python3-pip python3-devel hidapi","title":"Install hidapi"},{"location":"docs/installation/fedora/#upgrade-pip","text":"You need to upgrade pip, using pip. In my experience, old versions of pip may fail to properly install some of the required Python dependencies. python -m pip install --upgrade pip","title":"Upgrade pip"},{"location":"docs/installation/fedora/#configure-access-to-elgato-devices","text":"The following will create a file called /etc/udev/rules.d/70-streamdeck.rules and add the following text to it: SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", TAG+=\"uaccess\" . Creating this file adds a udev rule that provides your user with access to USB devices created by Elgato. sudo sh -c 'echo \"SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", TAG+=\\\"uaccess\\\"\" > /etc/udev/rules.d/70-streamdeck.rules' For the rule to take immediate effect, run the following command: sudo udevadm trigger If the software is having problems later to detect the Stream Deck, you can try unplugging/plugging it back in.","title":"Configure access to Elgato devices"},{"location":"docs/installation/fedora/#install-stream-deck-ui","text":"python -m pip install streamdeck-ui --user See system tray installation. Launch with streamdeck See troubleshooting for tips if you're stuck.","title":"Install Stream Deck UI"},{"location":"docs/installation/opensuse/","text":"Installing on openSUSE This has been tested on Tumbleweed. Install hidapi sudo zypper install libhidapi-libusb0 python310-devel kernel-devel python310-devel and kernel-devel are required because pip is going to have to build evdev . Upgrade pip You may need to upgrade pip, using pip. python3 -m pip install --upgrade pip Configure access to Elgato devices The following will create a file called /etc/udev/rules.d/70-streamdeck.rules and add the following text to it: SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", TAG+=\"uaccess\" . Creating this file adds a udev rule that provides your user with access to USB devices created by Elgato. sudo sh -c 'echo \"SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", TAG+=\\\"uaccess\\\"\" > /etc/udev/rules.d/70-streamdeck.rules' For the rule to take immediate effect, run the following command: sudo udevadm trigger If the software is having problems later to detect the Stream Deck, you can try unplugging/plugging it back in. Install Stream Deck UI python3 -m pip install streamdeck-ui --user See system tray installation. Launch with streamdeck See troubleshooting for tips if you're stuck.","title":"Opensuse"},{"location":"docs/installation/opensuse/#installing-on-opensuse","text":"This has been tested on Tumbleweed.","title":"Installing on openSUSE"},{"location":"docs/installation/opensuse/#install-hidapi","text":"sudo zypper install libhidapi-libusb0 python310-devel kernel-devel python310-devel and kernel-devel are required because pip is going to have to build evdev .","title":"Install hidapi"},{"location":"docs/installation/opensuse/#upgrade-pip","text":"You may need to upgrade pip, using pip. python3 -m pip install --upgrade pip","title":"Upgrade pip"},{"location":"docs/installation/opensuse/#configure-access-to-elgato-devices","text":"The following will create a file called /etc/udev/rules.d/70-streamdeck.rules and add the following text to it: SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", TAG+=\"uaccess\" . Creating this file adds a udev rule that provides your user with access to USB devices created by Elgato. sudo sh -c 'echo \"SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", TAG+=\\\"uaccess\\\"\" > /etc/udev/rules.d/70-streamdeck.rules' For the rule to take immediate effect, run the following command: sudo udevadm trigger If the software is having problems later to detect the Stream Deck, you can try unplugging/plugging it back in.","title":"Configure access to Elgato devices"},{"location":"docs/installation/opensuse/#install-stream-deck-ui","text":"python3 -m pip install streamdeck-ui --user See system tray installation. Launch with streamdeck See troubleshooting for tips if you're stuck.","title":"Install Stream Deck UI"},{"location":"docs/installation/systemd/","text":"systemd installation Once you have a working streamdeck_ui installation, you can also configure it to run as a systemd user service. It will automatically run when you login and you can manage it using systemctl . Installation Make a directory where the systemd user configuration will be stored. mkdir -p $HOME /.local/share/systemd/user/ Create (an empty) configuration file. touch $HOME /.local/share/systemd/user/streamdeck.service Use your favorite editor and paste the following content into the streamdeck.service file (rembember replace <yourusername> ): [Unit] Description = A Linux compatible UI for the Elgato Stream Deck. [Service] Type = simple ExecStart = /home/<yourusername>/.local/bin/streamdeck -n Restart = on-failure [Install] WantedBy = default.target To make the configuration take effect and install the service into systemd, run the following commands: systemctl -- user daemon - reload systemctl -- user enable streamdeck Tip: Before you continue, make sure you are not already running streamdeck_ui. If it's open, click File > Exit. Only one instance of streamdeck_ui can be running at a time. You are now all set. To start the service, run the following command: systemctl --user start streamdeck There are some additional commands that may be useful. To see the status of the service, run: systemctl --user status streamdeck To review the service log file (newest entries at the top) for troubleshooting, run: journalctl --user -r To stop the service, run: systemctl --user stop streamdeck Installation in virtual environment If you have installed streamdeck_ui in a virtual environment, you can still use it in a systemd service. Assume you are in the following directory: /home/johnsmith/streamdeck_ui You create a virtual environment, called .venv and activate it as follows: python3 -m venv .venv source .venv/bin/activate and finally install streamdeck_ui like this: python3 -m pip install streamdeck_ui Your virtual environment is now configured and located in /home/johnsmith/streamdeck_ui/.venv The steps for installing the systemd service is exactly the same. The only difference is you have to point the ExecStart= to the streamdeck executable inside the virtual environment, like so: ExecStart=/home/johnsmith/streamdeck_ui/.venv/bin/streamdeck -n Uninstalling The following steps will stop, disable, remove the configuration file and finally reload the settings: systemctl -- user stop streamdeck systemctl -- user disable streamdeck rm $ HOME /. local / share / systemd / user / streamdeck . service systemctl -- user daemon - reload","title":"Systemd"},{"location":"docs/installation/systemd/#systemd-installation","text":"Once you have a working streamdeck_ui installation, you can also configure it to run as a systemd user service. It will automatically run when you login and you can manage it using systemctl .","title":"systemd installation"},{"location":"docs/installation/systemd/#installation","text":"Make a directory where the systemd user configuration will be stored. mkdir -p $HOME /.local/share/systemd/user/ Create (an empty) configuration file. touch $HOME /.local/share/systemd/user/streamdeck.service Use your favorite editor and paste the following content into the streamdeck.service file (rembember replace <yourusername> ): [Unit] Description = A Linux compatible UI for the Elgato Stream Deck. [Service] Type = simple ExecStart = /home/<yourusername>/.local/bin/streamdeck -n Restart = on-failure [Install] WantedBy = default.target To make the configuration take effect and install the service into systemd, run the following commands: systemctl -- user daemon - reload systemctl -- user enable streamdeck Tip: Before you continue, make sure you are not already running streamdeck_ui. If it's open, click File > Exit. Only one instance of streamdeck_ui can be running at a time. You are now all set. To start the service, run the following command: systemctl --user start streamdeck There are some additional commands that may be useful. To see the status of the service, run: systemctl --user status streamdeck To review the service log file (newest entries at the top) for troubleshooting, run: journalctl --user -r To stop the service, run: systemctl --user stop streamdeck","title":"Installation"},{"location":"docs/installation/systemd/#installation-in-virtual-environment","text":"If you have installed streamdeck_ui in a virtual environment, you can still use it in a systemd service. Assume you are in the following directory: /home/johnsmith/streamdeck_ui You create a virtual environment, called .venv and activate it as follows: python3 -m venv .venv source .venv/bin/activate and finally install streamdeck_ui like this: python3 -m pip install streamdeck_ui Your virtual environment is now configured and located in /home/johnsmith/streamdeck_ui/.venv The steps for installing the systemd service is exactly the same. The only difference is you have to point the ExecStart= to the streamdeck executable inside the virtual environment, like so: ExecStart=/home/johnsmith/streamdeck_ui/.venv/bin/streamdeck -n","title":"Installation in virtual environment"},{"location":"docs/installation/systemd/#uninstalling","text":"The following steps will stop, disable, remove the configuration file and finally reload the settings: systemctl -- user stop streamdeck systemctl -- user disable streamdeck rm $ HOME /. local / share / systemd / user / streamdeck . service systemctl -- user daemon - reload","title":"Uninstalling"},{"location":"docs/installation/ubuntu/","text":"Installing on Ubuntu This has been tested on Ubuntu 2004, 2204, Linux Mint 20. Install hidapi sudo apt install libhidapi-libusb0 python3-pip Note that for version 2.0.6 and below, you also need to install libxcb-xinerama0 (include it with apt in the line above). Set path You need to add ~/.local/bin to your path. Be sure to add this to your .bashrc (or equivalent) file so it automatically sets it for you in future. PATH=$PATH:$HOME/.local/bin Upgrade pip You need to upgrade pip, using pip. In my experience, old versions of pip may fail to properly install some of the required Python dependencies. python3 -m pip install --upgrade pip Configure access to Elgato devices The following will create a file called /etc/udev/rules.d/70-streamdeck.rules and add the following text to it: SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", TAG+=\"uaccess\" . Creating this file adds a udev rule that provides your user with access to USB devices created by Elgato. sudo sh -c 'echo \"SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", TAG+=\\\"uaccess\\\"\" > /etc/udev/rules.d/70-streamdeck.rules' For the rule to take immediate effect, run the following command: sudo udevadm trigger If the software is having problems later to detect the Stream Deck, you can try unplugging/plugging it back in. Install Stream Deck UI python3 -m pip install streamdeck-ui --user Launch with streamdeck See troubleshooting for tips if you're stuck.","title":"Ubuntu"},{"location":"docs/installation/ubuntu/#installing-on-ubuntu","text":"This has been tested on Ubuntu 2004, 2204, Linux Mint 20.","title":"Installing on Ubuntu"},{"location":"docs/installation/ubuntu/#install-hidapi","text":"sudo apt install libhidapi-libusb0 python3-pip Note that for version 2.0.6 and below, you also need to install libxcb-xinerama0 (include it with apt in the line above).","title":"Install hidapi"},{"location":"docs/installation/ubuntu/#set-path","text":"You need to add ~/.local/bin to your path. Be sure to add this to your .bashrc (or equivalent) file so it automatically sets it for you in future. PATH=$PATH:$HOME/.local/bin","title":"Set path"},{"location":"docs/installation/ubuntu/#upgrade-pip","text":"You need to upgrade pip, using pip. In my experience, old versions of pip may fail to properly install some of the required Python dependencies. python3 -m pip install --upgrade pip","title":"Upgrade pip"},{"location":"docs/installation/ubuntu/#configure-access-to-elgato-devices","text":"The following will create a file called /etc/udev/rules.d/70-streamdeck.rules and add the following text to it: SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fd9\", TAG+=\"uaccess\" . Creating this file adds a udev rule that provides your user with access to USB devices created by Elgato. sudo sh -c 'echo \"SUBSYSTEM==\\\"usb\\\", ATTRS{idVendor}==\\\"0fd9\\\", TAG+=\\\"uaccess\\\"\" > /etc/udev/rules.d/70-streamdeck.rules' For the rule to take immediate effect, run the following command: sudo udevadm trigger If the software is having problems later to detect the Stream Deck, you can try unplugging/plugging it back in.","title":"Configure access to Elgato devices"},{"location":"docs/installation/ubuntu/#install-stream-deck-ui","text":"python3 -m pip install streamdeck-ui --user Launch with streamdeck See troubleshooting for tips if you're stuck.","title":"Install Stream Deck UI"}]}